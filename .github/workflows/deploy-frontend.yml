name: Deploy S3 and CloudFront
on:
  workflow_call:
    secrets:
        AWS_ACCESS_KEY_ID:
          required: true
        AWS_SECRET_ACCESS_KEY:
          required: true
        AWS_REGION: 
          required: true
        AWS_S3_BUCKET_NAME:
          required: true

  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'frontend/*'
jobs:
  create-sync-s3:
    runs-on: ubuntu-latest
    outputs:
      aws_bucket_name: ${{ steps.create_s3_bucket.outputs.aws_bucket_name }}  # Define job output
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 1: Create an S3 Bucket
      - name: Create S3 bucket if it doesn't exist
        id: create_s3_bucket
        run: |
          BUCKET_NAME="${{ secrets.AWS_S3_BUCKET_NAME }}" # Unique bucket name
          aws s3api head-bucket --bucket "$BUCKET_NAME" || aws s3api create-bucket --bucket "$BUCKET_NAME" --region ${{ secrets.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
          echo "AWS_BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
          echo "aws_bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT



      # Step 2: Sync files to S3
      - name: Sync files to S3
        run: |
          aws s3 sync ./frontend/ s3://$AWS_BUCKET_NAME --delete

  create-cloudfront-dist:
    runs-on: ubuntu-latest
    needs: create-sync-s3
    outputs:
        cloudfront_oac_id: ${{ steps.check_oac.outputs.cloudfront_oac_id }}
        aws_distribution_id: ${{ steps.create_cloudfront.outputs.aws_distribution_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}



      # Step 1: Create CloudFront Origin Access Control
      - name: Check if CloudFront OAC exists
        id: check_oac
        run: |
          OAC_ID=$(aws cloudfront list-origin-access-controls \
            --query "OriginAccessControlList.Items[?Name=='S3OAC-production'].Id | [0]" \
            --output text)
          
          if [ "$OAC_ID" == "None" ]; then
          
          OAC_CONFIG=$(cat <<EOF
          {
            "Name": "S3OAC-production",
            "OriginAccessControlOriginType": "s3",
            "SigningProtocol": "sigv4",
            "SigningBehavior": "always",
            "Description": "OAC for CloudFront to access S3 bucket"
          }
          EOF
          )
          OAC_ID=$(aws cloudfront create-origin-access-control \
            --origin-access-control-config "$OAC_CONFIG" \
            --query "OriginAccessControl.Id" \
            --output text)
          fi
          echo "cloudfront_oac_id=$OAC_ID" >> $GITHUB_OUTPUT

      # Step 2: Create CloudFront Distribution
      - name: Create CloudFront Distribution if not exists
        id: create_cloudfront
        run: |
                DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?DomainName=='${{ secrets.AWS_S3_BUCKET_NAME }}.s3.amazonaws.com']].Id" --output text)
                if [ "$DISTRIBUTION_ID" == "None" ]; then
                  DISTRIBUTION_ID=$(aws cloudfront create-distribution \
                    --distribution-config '{
                        "CallerReference": "$(date +%s)",
                        "Aliases": {
                            "Quantity": 0
                        },
                        "DefaultRootObject": "index.html",
                        "Origins": {
                            "Quantity": 1,
                            "Items": [
                                {
                                    "Id": "${{ secrets.AWS_S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com",
                                    "DomainName": "${{ secrets.AWS_S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com",
                                    "OriginPath": "",
                                    "CustomHeaders": {
                                        "Quantity": 0
                                    },
                                    "S3OriginConfig": {
                                        "OriginAccessIdentity": ""
                                    },
                                    "ConnectionAttempts": 3,
                                    "ConnectionTimeout": 10,
                                    "OriginShield": {
                                        "Enabled": false
                                    },
                                    "OriginAccessControlId": "${{ steps.check_oac.outputs.cloudfront_oac_id }}"
                                }
                            ]
                        },
                        "OriginGroups": {
                            "Quantity": 0
                        },
                        "DefaultCacheBehavior": {
                            "TargetOriginId": "${{ secrets.AWS_S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com",
                            "ForwardedValues": {
                                "QueryString": false,
                                "Cookies": {
                                    "Forward": "none"
                                },
                                "Headers": {
                                    "Quantity": 0
                                },
                                "QueryStringCacheKeys": {
                                    "Quantity": 0
                                }
                            },
                            "TrustedSigners": {
                                "Enabled": false,
                                "Quantity": 0
                            },
                            "ViewerProtocolPolicy": "allow-all",
                            "MinTTL": 0,
                            "AllowedMethods": {
                                "Quantity": 2,
                                "Items": [
                                    "HEAD",
                                    "GET"
                                ],
                                "CachedMethods": {
                                    "Quantity": 2,
                                    "Items": [
                                        "HEAD",
                                        "GET"
                                    ]
                                }
                            },
                            "SmoothStreaming": false,
                            "DefaultTTL": 86400,
                            "MaxTTL": 31536000,
                            "Compress": false,
                            "LambdaFunctionAssociations": {
                                "Quantity": 0
                            },
                            "FieldLevelEncryptionId": ""
                        },
                        "CacheBehaviors": {
                            "Quantity": 0
                        },
                        "CustomErrorResponses": {
                            "Quantity": 0
                        },
                        "Comment": "",
                        "Logging": {
                            "Enabled": false,
                            "IncludeCookies": false,
                            "Bucket": "",
                            "Prefix": ""
                        },
                        "PriceClass": "PriceClass_All",
                        "Enabled": true,
                        "ViewerCertificate": {
                            "CloudFrontDefaultCertificate": true,
                            "MinimumProtocolVersion": "TLSv1",
                            "CertificateSource": "cloudfront"
                        },
                        "Restrictions": {
                            "GeoRestriction": {
                                "RestrictionType": "none",
                                "Quantity": 0
                            }
                        },
                        "WebACLId": "",
                        "HttpVersion": "http2",
                        "IsIPV6Enabled": true
                    }' \
                    --query "Distribution.Id" --output text)
                      fi
                      DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?DomainName=='${{ secrets.AWS_S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com']].Id" --output text)

                      echo "aws_distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

        # echo "$(aws cloudfront get-distribution-config --id E2HDCGYCPFSX9R)"
      # Step 3: Set S3 bucket policy to allow CloudFront access
      - name: Set S3 bucket policy to allow CloudFront access
        run: |
          aws s3api put-bucket-policy --bucket "${{ secrets.AWS_S3_BUCKET_NAME }}" --policy '{
                      "Version": "2008-10-17",
                      "Id": "PolicyForCloudFrontPrivateContent",
                      "Statement": [
                          {
                              "Sid": "AllowCloudFrontServicePrincipal",
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": "cloudfront.amazonaws.com"
                              },
                              "Action": "s3:GetObject",
                              "Resource": "arn:aws:s3:::${{ secrets.AWS_S3_BUCKET_NAME }}/*",
                              "Condition": {
                                  "StringEquals": {
                                      "AWS:SourceArn": "arn:aws:cloudfront::194722414339:distribution/${{ steps.create_cloudfront.outputs.aws_distribution_id }}"
                                  }
                              }
                          }
                      ]
                    }'

      # Step 4: Invalidate CloudFront Cache
      - name: Invalidate CloudFront cache
        run: |
          sleep 30
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?DomainName=='${{ secrets.AWS_S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com']].Id" --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
