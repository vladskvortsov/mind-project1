name: Deploy VPC, EC2, RDS, ElasticCache
on:
  workflow_call:
    secrets:
        AWS_ACCESS_KEY_ID:
          required: true
        AWS_SECRET_ACCESS_KEY:
          required: true
        AWS_REGION: 
          required: true
        AWS_S3_BUCKET_NAME:
          required: true
        AWS_ACCOUNT_ID: 
          required: true

  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'backend_redis/*'
  #     - 'backend_rds/*'
jobs:
  deploy-rds:
    runs-on: ubuntu-latest 
    outputs:
      aws_vpc_id: ${{ steps.create_vpc.outputs.aws_vpc_id }}
      ec2_sg_id: ${{ steps.create_sg.outputs.ec2_sg_id }}
      db_sg_id: ${{ steps.create_rds_sg.outputs.db_sg_id }}
      private_subnet_id: ${{ steps.subnets.outputs.private_subnet_id }}
      private_subnet_id2: ${{ steps.subnets.outputs.private_subnet_id2 }}
      public_subnet_id: ${{ steps.subnets.outputs.public_subnet_id }}
      igw_id: ${{ steps.create_igw.outputs.igw_id }}
    env:  # Set secrets as environment variables for the job
      DB_NAME: mydb
      DB_USER: dbuser
      DB_PORT: 5432
      DB_INSTANCE_IDENTIFIER: mydb
      DB_PASSWORD: Mypassword11


    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create or Use Existing VPC
      id: create_vpc
      run: |
        VPC_ID=$(aws ec2 describe-vpcs --filters Name=tag:Name,Values=project1-vpc --query "Vpcs[0].VpcId" --output text 2>/dev/null || echo "None")
        if [ "$VPC_ID" == "None" ]; then
          VPC_ID=$(aws ec2 create-vpc --cidr-block 10.10.0.0/16 --query 'Vpc.VpcId' --output text)
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-support
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames
          aws ec2 create-tags --resources $VPC_ID --tags Key=Name,Value=project1-vpc
          echo "Created VPC with ID: $VPC_ID"
        else
          echo "Using existing VPC with ID: $VPC_ID"
        fi
        echo "aws_vpc_id=$VPC_ID" >> $GITHUB_OUTPUT

    - name: Create Public and Private Subnets
      id: subnets
      run: |
        PUBLIC_SUBNET_1=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=${{ steps.create_vpc.outputs.aws_vpc_id }} Name=cidr-block,Values=10.10.1.0/24 --query "Subnets[0].SubnetId" --output text 2>/dev/null || echo "None")
        if [ "$PUBLIC_SUBNET_1" == "None" ]; then
          PUBLIC_SUBNET_1=$(aws ec2 create-subnet --vpc-id ${{ steps.create_vpc.outputs.aws_vpc_id }} \
            --cidr-block 10.10.1.0/24 --availability-zone ${{ secrets.AWS_REGION }}a \
            --query 'Subnet.SubnetId' --output text)
          echo "Created Public Subnet 1: $PUBLIC_SUBNET_1"
        fi

        PUBLIC_SUBNET_2=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=${{ steps.create_vpc.outputs.aws_vpc_id }} Name=cidr-block,Values=10.10.2.0/24 --query "Subnets[0].SubnetId" --output text 2>/dev/null || echo "None")
        if [ "$PUBLIC_SUBNET_2" == "None" ]; then
          PUBLIC_SUBNET_2=$(aws ec2 create-subnet --vpc-id ${{ steps.create_vpc.outputs.aws_vpc_id }} \
            --cidr-block 10.10.2.0/24 --availability-zone ${{ secrets.AWS_REGION }}b \
            --query 'Subnet.SubnetId' --output text)
          echo "Created Public Subnet 2: $PUBLIC_SUBNET_2"
        fi

        PRIVATE_SUBNET_1=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=${{ steps.create_vpc.outputs.aws_vpc_id }} Name=cidr-block,Values=10.10.3.0/24 --query "Subnets[0].SubnetId" --output text 2>/dev/null || echo "None")
        if [ "$PRIVATE_SUBNET_1" == "None" ]; then
          PRIVATE_SUBNET_1=$(aws ec2 create-subnet --vpc-id ${{ steps.create_vpc.outputs.aws_vpc_id }} \
            --cidr-block 10.10.3.0/24 --availability-zone ${{ secrets.AWS_REGION }}a \
            --query 'Subnet.SubnetId' --output text)
          echo "Created Private Subnet 1: $PRIVATE_SUBNET_1"
        fi

        PRIVATE_SUBNET_2=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=${{ steps.create_vpc.outputs.aws_vpc_id }} Name=cidr-block,Values=10.10.4.0/24 --query "Subnets[0].SubnetId" --output text 2>/dev/null || echo "None")
        if [ "$PRIVATE_SUBNET_2" == "None" ]; then
          PRIVATE_SUBNET_2=$(aws ec2 create-subnet --vpc-id ${{ steps.create_vpc.outputs.aws_vpc_id }} \
            --cidr-block 10.10.4.0/24 --availability-zone ${{ secrets.AWS_REGION }}b \
            --query 'Subnet.SubnetId' --output text)
          echo "Created Private Subnet 2: $PRIVATE_SUBNET_2"
        fi

        echo "public_subnet_id=$PUBLIC_SUBNET_1" >> $GITHUB_OUTPUT
        echo "public_subnet_id2=$PUBLIC_SUBNET_2" >> $GITHUB_OUTPUT
        echo "private_subnet_id=$PRIVATE_SUBNET_1" >> $GITHUB_OUTPUT
        echo "private_subnet_id2=$PRIVATE_SUBNET_2" >> $GITHUB_OUTPUT

    - name: Create or Use Existing Internet Gateway
      id: create_igw
      run: |
        IGW_ID=$(aws ec2 describe-internet-gateways --filters Name=attachment.vpc-id,Values=${{ steps.create_vpc.outputs.aws_vpc_id }} --query "InternetGateways[0].InternetGatewayId" --output text 2>/dev/null || echo "None")
        if [ "$IGW_ID" == "None" ]; then
          IGW_ID=$(aws ec2 create-internet-gateway --query 'InternetGateway.InternetGatewayId' --output text)
          aws ec2 attach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id ${{ steps.create_vpc.outputs.aws_vpc_id }}
          echo "Created Internet Gateway: $IGW_ID"
        else
          echo "Using existing Internet Gateway: $IGW_ID"
        fi
        echo "igw_id=$IGW_ID" >> $GITHUB_OUTPUT

    - name: Create or Use Existing Public Route Table
      id: route_tables
      run: |
        PUBLIC_RT=$(aws ec2 describe-route-tables --filters Name=vpc-id,Values=${{ steps.create_vpc.outputs.aws_vpc_id }} Name=tag:Name,Values=Public-Route-Table --query "RouteTables[0].RouteTableId" --output text 2>/dev/null || echo "None")
        if [ "$PUBLIC_RT" == "None" ]; then
          PUBLIC_RT=$(aws ec2 create-route-table --vpc-id ${{ steps.create_vpc.outputs.aws_vpc_id }} --query 'RouteTable.RouteTableId' --output text)
          aws ec2 create-tags --resources $PUBLIC_RT --tags Key=Name,Value=Public-Route-Table
          aws ec2 create-route --route-table-id $PUBLIC_RT --destination-cidr-block 0.0.0.0/0 --gateway-id ${{ steps.create_igw.outputs.igw_id }}
          echo "Created Public Route Table: $PUBLIC_RT"
        else
          echo "Using existing Public Route Table: $PUBLIC_RT"
        fi

        # Associate route table with public subnets
        aws ec2 associate-route-table --route-table-id $PUBLIC_RT --subnet-id ${{ steps.subnets.outputs.public_subnet_id }}
        aws ec2 associate-route-table --route-table-id $PUBLIC_RT --subnet-id ${{ steps.subnets.outputs.public_subnet_id2 }}
        echo "PUBLIC_RT=$PUBLIC_RT" >> $GITHUB_OUTPUT

    - name: Create Security Group for RDS
      id: create_rds_sg
      run: |
        RDS_SG=$(aws ec2 describe-security-groups --filters Name=group-name,Values=RDS-Security-Group Name=vpc-id,Values=${{ steps.create_vpc.outputs.aws_vpc_id }} --query "SecurityGroups[0].GroupId" --output text 2>/dev/null || echo "None")
        if [ "$RDS_SG" == "None" ]; then
          RDS_SG=$(aws ec2 create-security-group --group-name RDS-Security-Group \
            --description "Security group for RDS" --vpc-id ${{ steps.create_vpc.outputs.aws_vpc_id }} --query 'GroupId' --output text)
          aws ec2 authorize-security-group-ingress --group-id $RDS_SG \
            --protocol tcp --port 5432 --cidr 0.0.0.0/0
          echo "Created RDS Security Group: $RDS_SG"
        else
          echo "Using existing RDS Security Group: $RDS_SG"
        fi
        echo "db_sg_id=$RDS_SG" >> $GITHUB_OUTPUT

    - name: Create DB Subnet Group
      id: db_subnet_group
      run: |
        DB_SUBNET_GROUP=$(aws rds describe-db-subnet-groups --db-subnet-group-name private-subnets-group --query "DBSubnetGroups[0].DBSubnetGroupName" --output text 2>/dev/null || echo "None")
        if [ "$DB_SUBNET_GROUP" == "None" ]; then
          aws rds create-db-subnet-group \
            --db-subnet-group-name "private-subnets-group" \
            --db-subnet-group-description "Subnet group for RDS in private subnets" \
            --subnet-ids ${{ steps.subnets.outputs.private_subnet_id }} ${{ steps.subnets.outputs.private_subnet_id2 }}
          echo "Created DB Subnet Group: private-subnets-group"
        else
          echo "Using existing DB Subnet Group: $DB_SUBNET_GROUP"
        fi

    - name: Create or Use Existing EC2 Security Group
      id: create_sg
      run: |
        SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=EC2-SG Name=vpc-id,Values=${{ steps.create_vpc.outputs.aws_vpc_id }} --query "SecurityGroups[0].GroupId" --output text 2>/dev/null || echo "None")
        if [ "$SG_ID" == "None" ]; then
          SG_ID=$(aws ec2 create-security-group --group-name EC2-SG \
            --description "Security group for EC2" --vpc-id ${{ steps.create_vpc.outputs.aws_vpc_id }} --query 'GroupId' --output text)
          echo "Created EC2 Security Group: $SG_ID"

        aws ec2 authorize-security-group-ingress --group-id $SG_ID \
          --protocol tcp --port 22 --cidr 0.0.0.0/0
        aws ec2 authorize-security-group-ingress --group-id $SG_ID \
          --protocol tcp --port 8000 --cidr 0.0.0.0/0
        aws ec2 authorize-security-group-ingress --group-id $SG_ID \
          --protocol tcp --port 8003 --cidr 0.0.0.0/0
        echo "Ingress rules added to security group: $SG_ID"
        else
          echo "Using existing EC2 Security Group: $SG_ID"
        fi
        echo "ec2_sg_id=$SG_ID" >> $GITHUB_OUTPUT







    - name: Create or Use Existing RDS Instance
      id: create_rds
      run: |
        # Check if the RDS instance already exists
        RDS_INSTANCE=$(aws rds describe-db-instances --db-instance-identifier ${{ env.DB_INSTANCE_IDENTIFIER }} --query "DBInstances[0].DBInstanceIdentifier" --output text 2>/dev/null || echo "None")
        
        if [ "$RDS_INSTANCE" == "None" ]; then
          echo "RDS instance does not exist. Creating RDS instance..."
          
          # Create the RDS instance
          aws rds create-db-instance \
            --db-instance-identifier ${{ env.DB_INSTANCE_IDENTIFIER }} \
            --db-instance-class db.t3.micro \
            --engine postgres \
            --db-name ${{ env.DB_NAME }} \
            --master-username ${{ env.DB_USER }} \
            --master-user-password ${{ env.DB_PASSWORD }} \
            --allocated-storage 20 \
            --vpc-security-group-ids ${{ steps.create_rds_sg.outputs.db_sg_id }} \
            --db-subnet-group-name "private-subnets-group" \
            --port ${{ env.DB_PORT }} \
            --no-multi-az \
            --backup-retention-period 0 # No automated backups

          echo "RDS instance created: ${{ env.DB_INSTANCE_IDENTIFIER }}"
        else
          echo "RDS instance already exists: $RDS_INSTANCE"
        fi


  deploy-elascticache:
    runs-on: ubuntu-latest
    needs: deploy-rds
    outputs:
      redis_sg_id: ${{ steps.create_redis_sg.outputs.redis_sg_id }}
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create or Use Existing ElastiCache Security Group
      id: create_redis_sg
      run: |
        SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=ElastiCache-SG Name=vpc-id,Values=${{ needs.deploy-rds.outputs.aws_vpc_id }} --query "SecurityGroups[0].GroupId" --output text 2>/dev/null || echo "None")
        if [ "$SG_ID" == "None" ]; then
          SG_ID=$(aws ec2 create-security-group --group-name ElastiCache-SG \
            --description "Security group for ElastiCache" --vpc-id ${{ needs.deploy-rds.outputs.aws_vpc_id }} --query 'GroupId' --output text)
          echo "Created ElastiCache Security Group: $SG_ID"

          # Add ingress rule for Redis port
          aws ec2 authorize-security-group-ingress --group-id $SG_ID \
            --protocol tcp --port 6379 --source-group ${{ needs.deploy-rds.outputs.ec2_sg_id }}
        else
          echo "Using existing ElastiCache Security Group: $SG_ID"
        fi
        echo "redis_sg_id=$SG_ID" >> $GITHUB_OUTPUT

    - name: Create Cache Subnet Group
      id: cache_subnet_group
      run: |
        CACHE_SUBNET_GROUP=$(aws elasticache describe-cache-subnet-groups --cache-subnet-group-name private-subnets-group --query "CacheSubnetGroups[0].CacheSubnetGroupName" --output text 2>/dev/null || echo "None")
        if [ "$CACHE_SUBNET_GROUP" == "None" ]; then
          aws elasticache create-cache-subnet-group \
          --cache-subnet-group-name private-subnets-group \
          --cache-subnet-group-description "Subnet group for Elasticache in private subnets" \
          --subnet-ids ${{ needs.deploy-rds.outputs.private_subnet_id }} ${{ needs.deploy-rds.outputs.private_subnet_id2 }}

          echo "Created Elasticache Subnet Group: private-subnets-group"
        else
          echo "Using existing Elasticache Subnet Group: $CACHE_SUBNET_GROUP"
        fi

    - name: Create or Use Existing ElastiCache Cluster
      id: create_elasticache
      run: |
        # Check if the ElastiCache cluster already exists
        ELASTICACHE_CLUSTER=$(aws elasticache describe-cache-clusters --cache-cluster-id my-redis-cluster --query "CacheClusters[0].CacheClusterId" --output text 2>/dev/null || echo "None")
        
        if [ "$ELASTICACHE_CLUSTER" == "None" ]; then
          echo "ElastiCache cluster does not exist. Creating ElastiCache cluster..."
          
          # Create the ElastiCache cluster
          aws elasticache create-cache-cluster \
            --cache-cluster-id my-redis-cluster \
            --cache-node-type cache.t3.micro \
            --engine redis \
            --num-cache-nodes 1 \
            --cache-subnet-group-name private-subnets-group \
            --security-group-ids ${{ steps.create_redis_sg.outputs.redis_sg_id }} \
            --port 6379 \
            --engine-version 6.x \
            --az-mode single-az
          
          echo "ElastiCache cluster created: my-redis-cluster"
        else
          echo "ElastiCache cluster already exists: $ELASTICACHE_CLUSTER"
        fi

  
  deploy-ec2:
    runs-on: ubuntu-latest
    needs: 
     - deploy-rds
     - deploy-elascticache
    outputs:
      ec2_public_ip: ${{ steps.get_ec2_public_ip.outputs.ec2_public_ip }}
      instance-id: ${{ steps.create-ec2.outputs.instance-id }}
      db_endpoint: ${{ steps.get_rds_endpoint.outputs.db_endpoint }}
      elasticache_endpoint: ${{ steps.get_elasticache_endpoint.outputs.elasticache_endpoint }}
      cloudfront_endpoint: ${{ steps.get_cloudfront_endpoint.outputs.cloudfront_endpoint }}
    env:  # Set secrets as environment variables for the job
      DB_NAME: mydb
      DB_USER: dbuser
      DB_PORT: 5432
      DB_PASSWORD: Mypassword11
      REDIS_PORT: 6379
      REDIS_DB: 0
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Check and Create SSH Key Pair if Not Exists
      id: create_key
      run: |
        if 
          aws ec2 describe-key-pairs --key-names key 2>/dev/null; then
          echo "Key pair 'key' already exists. Skipping creation."
        else
          aws ec2 create-key-pair --key-name key --query 'KeyMaterial' --output text > github-action-key.pem
          chmod 400 github-action-key.pem
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
    - name: Create IAM Role
      run: |
        aws iam get-role --role-name ecr-pull-role || \
        aws iam create-role --role-name ecr-pull-role \
          --assume-role-policy-document file://ecr-assume-role.json

    - name: Attach ECR Permissions Policy
      run: |
        aws iam put-role-policy \
          --role-name ecr-pull-role \
          --policy-name AmazonEC2ContainerRegistryPullOnly \
          --policy-document file://ecr-pull-role.json


    - name: Attach Role to the profile
      run: |
             aws iam get-instance-profile --instance-profile-name project1-ecr-access || aws iam create-instance-profile \
             --instance-profile-name project1-ecr-access


              ROLES_ATTACHED=$(aws iam get-instance-profile --instance-profile-name project1-ecr-access --query "InstanceProfile.Roles[*].RoleName" --output text)
              if [[ "$ROLES_ATTACHED" != *"$ROLE_NAME"* ]]; then
                aws iam add-role-to-instance-profile --instance-profile-name project1-ecr-access --role-name ecr-pull-role
              fi

    - name: Retrieve ElastiCache Endpoint
      id: get_elasticache_endpoint
      run: |
        # Retrieve the ElastiCache endpoint
        sleep 480
        ELASTICACHE_ENDPOINT=$(aws elasticache describe-cache-clusters \
          --cache-cluster-id my-redis-cluster \
          --show-cache-node-info \
          --query "CacheClusters[0].CacheNodes[0].Endpoint.Address" --output text 2>/dev/null || echo "None")
        
         echo "ElastiCache endpoint: $ELASTICACHE_ENDPOINT"
        echo "elasticache_endpoint=$ELASTICACHE_ENDPOINT" >> $GITHUB_OUTPUT

    - name: Retrieve RDS Endpoint
      id: get_rds_endpoint
      run: |
        # sleep 80
        ENDPOINT=$(aws rds describe-db-instances \
          --db-instance-identifier mydb \
          --query "DBInstances[0].Endpoint.Address" --output text)
        echo "RDS Endpoint: $ENDPOINT"
        echo "db_endpoint=$ENDPOINT" >> $GITHUB_OUTPUT


    - name: Retrieve CloudFront Endpoint
      id: get_cloudfront_endpoint
      run: |
        CLOUDFRONT_ENDPOINT=$(aws cloudfront list-distributions \
          --query "DistributionList.Items[?Origins.Items[?Id=='${{ secrets.AWS_S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com']].DomainName" \
          --output text)

        if [ -z "$CLOUDFRONT_ENDPOINT" ]; then
          echo "No CloudFront distribution found with the specified origin name: ${{ secrets.AWS_S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com"
        else
          echo "CloudFront endpoint retrieved: $CLOUDFRONT_ENDPOINT"
        fi

        echo "cloudfront_endpoint=$CLOUDFRONT_ENDPOINT" >> $GITHUB_OUTPUT




    - name: Setup EC2
      id: create-ec2
      uses: truemark/aws-ec2-run-instance-action@v5
      with:
        security-group-id: ${{ needs.deploy-rds.outputs.ec2_sg_id }}
        subnet-id: "${{ needs.deploy-rds.outputs.public_subnet_id }}"
        name: project1-backend
        region: ${{ secrets.AWS_REGION }}
        image-id: "ami-08eb150f611ca277f"
        instance-type: "t3.micro"
        instance-profile: "project1-ecr-access"
        volume-size: 8
        associate-public-ip-address: true
        key-name: key
        terminate-on-post: false
        user-data: |
          #!/bin/bash
          sudo apt update -y
          sudo apt install -y docker.io docker-compose
          sudo snap install aws-cli --classic
          sudo aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          sudo aws configure set aws_secret_access_key  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          sudo aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          cd /home/ubuntu/
          git clone https://github.com/vladskvortsov/mind-project1.git
          cd mind-project1/
          echo "SECRET_KEY=my-secret-key
          DEBUG=False

          DB_NAME=${{ env.DB_NAME }}
          DB_USER=${{ env.DB_USER }}
          DB_PASSWORD=${{ env.DB_PASSWORD }}
          DB_HOST=${{ steps.get_rds_endpoint.outputs.db_endpoint }} 
          DB_PORT=${{ env.DB_PORT }}

          REDIS_HOST=${{ steps.get_elasticache_endpoint.outputs.elasticache_endpoint }}
          REDIS_PORT=${{ env.REDIS_PORT }}
          REDIS_DB=${{ env.REDIS_DB }}

          CORS_ALLOWED_ORIGINS=http://${{ steps.get_cloudfront_endpoint.outputs.cloudfront_endpoint }}" > vars.env
 
          echo '# version: '3.8'
          services:
            backend_rds:
              env_file:
              - vars.env
              image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/project1-backend:backend-rds
              container_name: backend_rds
              ports:
                - "8000:8000"
              networks:
                - backend
              entrypoint: ["sh", "-c", "sleep 10 && python manage.py runserver 0.0.0.0:8000"]

            backend_redis:
              env_file:
              - vars.env
              image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/project1-backend:backend-redis
              container_name: backend_redis
              ports:
                - "8003:8003"
              networks:
                - backend
              entrypoint: ["sh", "-c", "sleep 10 && python manage.py runserver 0.0.0.0:8003"]

          networks:
            backend:
              driver: bridge' > docker-compose.yml
          docker-compose up -d

    - name: Attach Security Groups to EC2 Instance
      run: |
        aws ec2 modify-instance-attribute \
          --instance-id ${{ steps.create-ec2.outputs.instance-id }} \
          --groups "${{ needs.deploy-rds.outputs.db_sg_id }}" "${{ needs.deploy-elascticache.outputs.redis_sg_id }}" "${{ needs.deploy-rds.outputs.ec2_sg_id }}"

    - name: Retrieve Public IP Address of EC2 Instance
      id: get_ec2_public_ip
      run: |

        # Retrieve the public IP address
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ steps.create-ec2.outputs.instance-id }} \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)

        if [ "$PUBLIC_IP" == "None" ]; then
          echo "Error: The EC2 instance ${{ steps.create-ec2.outputs.instance-id }} does not have a public IP address."
        else
          echo "Public IP address for EC2 instance $INSTANCE_ID: $PUBLIC_IP"
        fi

        echo "ec2_public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

    - name: Create config.json
      run: |
        echo '{
            "BACKEND_RDS_URL": "http://${{ steps.get_ec2_public_ip.outputs.ec2_public_ip }}:8000/test_connection/",
            "BACKEND_REDIS_URL": "http://${{ steps.get_ec2_public_ip.outputs.ec2_public_ip }}:8003/test_connection/"
        }' > /home/runner/work/mind-project1/mind-project1/frontend/config.json
        
          aws s3 sync ./frontend/ s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete
        