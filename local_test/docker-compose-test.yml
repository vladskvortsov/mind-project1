version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

  redis:
    image: redis:6.2
    container_name: redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - backend

  backend_rds:
    build:
      context: ./backend_rds
    container_name: backend_rds
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: 5432
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    depends_on:
      - postgres
    ports:
      - "8000:8000"
    networks:
      - backend
    entrypoint: ["sh", "-c", "sleep 10 && python manage.py runserver 0.0.0.0:8000"]

  backend_redis:
    build:
      context: ./backend_redis
    container_name: backend_redis
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: ${REDIS_DB}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    depends_on:
      - redis
    ports:
      - "8003:8003"
    networks:
      - backend
    entrypoint: ["sh", "-c", "sleep 10 && python manage.py runserver 0.0.0.0:8003"]


  # Frontend (Nginx)
  frontend:
    image: nginx:latest
    container_name: frontend
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./frontend/nginx-test.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
    driver: local
